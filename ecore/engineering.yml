engineering-module:
  name: Ecore
  path: ecore
  representations:
    - representation-component-diagram: true
  dependencies:
    - nasdanika:modules/html/modules/emf
  issues:
    action-template:
      name: Action template
      description: |+2
        Annnotation to load documentation action from a template, e.g. YAML or XML, instead of creating with a factory.
        The action will then be populated as usual. This would allow to, say, have engineering issues at model element level.  
    engineering-generation-target:
      name: Engineering generation target
      description: |+2
        Generate engineering model instead of action model. This would allow to link issues, owners, etc. to model elements.
        Need support of merging.
     - name: Application model as output in addition to YAML
       increment: nasdanika:increments/2021/children/q2  
     - name: Engineering model as output
       description: EClass and EPackage are output as engineered elements. Issues, owner, and other things are loaded using Nasdanika engineering annotation pointing to a yaml file.     
     - name: YAML/load spec
       description: All keys including inherited - changeable, take load-key annotation into account, load-doc annotation to override default description. Sort alphabetically. Table. Homogenous, strict containment, default feature.  
     - name: Display EMaps directly to the value class with a different relationship, e.g. ``#--``
     - name: EKeys as qualifiers - similar to EMaps. Report in documentation. 
     - name: Consider support of association classes using annotations. E.g. an annotation on the association class with target reference name. Say ``association-class-reference`` key with reference name.  
     - name: Action template annotation - location of an action resource to load a template from instead of using AppFactory.createAction(). Would allow to merge, say, navigation actions.
     - name: Support of association classes - annotation on a rereference - reference of the target class which points to the target class. E.g. Alignment aligns Alignable to Aim. 


